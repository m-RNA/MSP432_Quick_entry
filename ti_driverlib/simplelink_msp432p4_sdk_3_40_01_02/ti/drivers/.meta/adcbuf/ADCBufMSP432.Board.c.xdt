%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ADCBufMSP432.Board.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let ADCBuf = args[0];
    let instances = ADCBuf.$instances;
    if (instances.length == 0) return;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADCBuf.defaultInstanceName + "COUNT";

    let map = {
        "External Buffered"    : "ADCBufMSP432_VREFPOS_EXTBUF_VREFNEG_EXTNEG",
        "External"             : "ADCBufMSP432_VREFPOS_EXTPOS_VREFNEG_EXTNEG",
        "2.5V"                 : "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS",
        "1.45V"                : "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS",
        "1.2V"                 : "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS",
        "VDD"                  : "ADCBufMSP432_VREFPOS_AVCC_VREFNEG_VSS",
        "External Pin"         : "ADCBufMSP432_INTERNAL_SOURCE_MODE_OFF",
        "Internal Temperature" : "ADCBufMSP432_TEMPERATURE_MODE",
        "Internal Battery"     : "ADCBufMSP432_BATTERY_MONITOR_MODE",
        "Non Differential"     : "ADCBufMSP432_SINGLE_ENDED",
        "Differential"         : "ADCBufMSP432_DIFFERENTIAL",
        "Auto"                 : "ADCBufMSP432_SOFTWARE_AUTOMATIC_TRIGGER",
        "Timer"                : "ADCBufMSP432_TIMER_TRIGGER"
    };


    /*
     * Example inputs of chan:
     * P4.3.GPIO/CS.MCLK/RTC_C.CLK/ADC14.A10
     * P4.1.GPIO/ADC14.A12/LCD_F.L12
     * P4.5.GPIO/ADC14.A8
     */
    function getAdcBufPinName(chan)
    {
        let pName = chan.match(/P\d\.\d/)[0]; /* PX.Y, ie P4.3 */
        let ax = chan.match(/ADC14\.A\d{1,2}/)[0].replace("ADC14.", ""); /* ADC14.Axx */
        let px = pName.substr(0, 2);     /* PX */
        let py = pName.substr(3, 1);     /* Y */
        return ("ADCBufMSP432_" + px + "_" + py + "_" + ax);
    }
%%}
/*
 *  =============================== ADCBuf ===============================
 */

#include <ti/drivers/ADCBuf.h>
#include <ti/drivers/adcbuf/ADCBufMSP432.h>

#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/interrupt.h>
#include <ti/devices/msp432p4xx/driverlib/adc14.h>
#include <ti/devices/msp432p4xx/driverlib/dma.h>

#define `countDef` `instances.length`

/*
 *  ======== adcbufMSP432Objects ========
 */
ADCBufMSP432_Object adcbufMSP432Objects[`countDef`];

/*
 *  ======== ADCBuf Channels ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
ADCBufMSP432_Channels adcBufMSP432Channels[`inst.channels`] = {
    % for (let j = 0; j < inst.channels; j++) {
    %   let channel = inst["adcBufChannel" + j];
    %   let adcPin = "ADCBufMSP432_PIN_NONE";
    %   let diffPin = "ADCBufMSP432_PIN_NONE";
    %   if (channel.inputSource === "External Pin") {
    %       let pinName = channel.adc.adcPin.$solution.devicePinName;
    %       adcPin = getAdcBufPinName(pinName);
    %    }
    %
    %   if (channel.mode === "Differential") {
    %       let pinName = channel.differentialPin.adc.adcDifferentialPin.$solution.devicePinName;
    %       diffPin = getAdcBufPinName(pinName);
    %   }
    /* `inst.$name``channel.$name` */
    {
        .adcPin = `adcPin`,
        .refSource = `map[channel.referenceSource]`,
        .refVoltage = `channel.referenceVoltage`,
        .adcInputMode = `map[channel.mode]`,
        .adcDifferentialPin = `diffPin`,
        .adcInternalSource = `map[channel.inputSource]`
    },
    % }
};

% }
/*
 *  ======== adcbufMSP432HWAttrs ========
 */
const ADCBufMSP432_HWAttrs adcbufMSP432HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let dmaIntNum = 0;
    % if (inst.enableDMA) {
    %    dmaIntNum = inst.adc.dmaInterruptNumber.$solution.devicePinName;
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .channelSetting = adcBufMSP432Channels,
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .clockSource = ADCBufMSP432_`inst.clockSource`_CLOCK,
        .useDMA = `inst.enableDMA`,
    % if (inst.enableDMA === true) {
        .dmaIntNum = `dmaIntNum`,
    % }
        .adcTriggerSource = `map[inst.triggerSource]`,
    % if (inst.triggerSource === "Timer") {
    %     let trig = inst.timer.$solution.peripheralName;
    %     let timerId = trig.substr(trig.indexOf("A"), 2);
        .adcTimerTriggerSource = ADCBufMSP432_TIMER`timerId`_CAPTURECOMPARE`inst.timerCaptureCompare`,
        .timerDutyCycle = `inst.timerDutyCycle`
    % }
    },
% }
};

/*
 *  ======== ADCBuf_config ========
 */
const ADCBuf_Config ADCBuf_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &ADCBufMSP432_fxnTable,
        .object = &adcbufMSP432Objects[`inst.$name`],
        .hwAttrs = &adcbufMSP432HWAttrs[`inst.$name`]
    },
% }
};

const uint_least8_t ADCBuf_count = `countDef`;
