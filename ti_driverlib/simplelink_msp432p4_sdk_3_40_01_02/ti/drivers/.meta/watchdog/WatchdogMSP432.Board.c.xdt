%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== WatchdogMSP432.Board.c.xdt ========
 */

    /* get at our module  */
    let Watchdog    = args[0];
    let Power       = system.getScript("/ti/drivers/Power");
    let Common      = system.getScript("/ti/drivers/Common.js");
    let instances   = Watchdog.$instances;
    if (instances.length == 0) return;

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef    = Watchdog.defaultInstanceName + "COUNT";

    let ratios      = [31, 27, 23, 19, 15, 13, 9, 6];
    let ratio_names = [
        "WDT_A_CLOCKDIVIDER_2G",
        "WDT_A_CLOCKDIVIDER_128M",
        "WDT_A_CLOCKDIVIDER_8192K",
        "WDT_A_CLOCKDIVIDER_512K",
        "WDT_A_CLOCKDIVIDER_32K",
        "WDT_A_CLOCKDIVIDER_8192",
        "WDT_A_CLOCKDIVIDER_512",
        "WDT_A_CLOCKDIVIDER_64"
    ];
%%}
/*
 *  =============================== Watchdog ===============================
 */

#include <ti/drivers/Watchdog.h>
#include <ti/drivers/watchdog/WatchdogMSP432.h>
#include <ti/devices/msp432p4xx/driverlib/interrupt.h>
#include <ti/devices/msp432p4xx/driverlib/wdt_a.h>

#define `countDef` `instances.length`

WatchdogMSP432_Object watchdogMSP432Objects[`countDef`];

const WatchdogMSP432_HWAttrs watchdogMSP432HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst     = instances[i];
%     let periodMS = Number(inst.period);
%     let freq     = Power.getClockFrequencies('ACLK')[0];
%     let idx;
%
%     for (idx = 0; idx < ratios.length; idx++) {
%         if (periodMS === (Math.pow(2, ratios[idx]) / freq) * 1000) {
%             break;
%         }
%     }
    /* `inst.$name`: period = `inst.period` */
    {
        .baseAddr       = WDT_A_BASE,
        .intNum         = INT_WDT_A,
        .intPriority    = `Common.intPriority2Hex(inst.interruptPriority)`,
        .clockSource    = WDT_A_CLOCKSOURCE_ACLK,
        .clockDivider   = `ratio_names[idx]`
    },
% }
};

const Watchdog_Config Watchdog_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
    /* `inst.$name` */
    {
        .fxnTablePtr = &WatchdogMSP432_fxnTable,
        .object      = &watchdogMSP432Objects[`i`],
        .hwAttrs     = &watchdogMSP432HWAttrs[`i`]
    }
% }
};

const uint_least8_t Watchdog_count = `countDef`;
