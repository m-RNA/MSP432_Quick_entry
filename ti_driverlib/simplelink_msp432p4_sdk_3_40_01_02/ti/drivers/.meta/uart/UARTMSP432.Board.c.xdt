%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== UARTMSP432.Board.c.xdt ========
 */

    let UART = args[0];

    let Common      = system.getScript("/ti/drivers/Common.js");
    let instances   = UART.$instances;
    let combinedBRT = {};
    let uniqueBRT   = [];

    if (instances.length == 0) return;

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = UART.defaultInstanceName + "COUNT";

    for (let ix = 0; ix < instances.length; ix++) {
        let inst        = instances[ix];
        let clockSource = inst.clockSource;

        if (clockSource == 'Any') {
            clockSource = UART.autoAssignClockSource(inst.baudRates);
        }

        let instanceBRT = UART.genBaudRateTable(inst.baudRates, clockSource);

        for (let ex = 0; ex < instanceBRT.length; ex++) {
            let entry        = instanceBRT[ex];
            let key          = entry.baud + '_' + entry.freq;
            combinedBRT[key] = entry;
        }
    }

    for (let key in combinedBRT) {
        uniqueBRT.push(combinedBRT[key]);
    }
%%}
/*
 *  =============================== UART ===============================
 */

#include <ti/drivers/UART.h>
#include <ti/drivers/uart/UARTMSP432.h>
#include <ti/devices/msp432p4xx/driverlib/interrupt.h>
#include <ti/devices/msp432p4xx/driverlib/uart.h>

#define `countDef` `instances.length`

UARTMSP432_Object uartMSP432Objects[`countDef`];

static const UARTMSP432_BaudrateConfig uartMSP432Baudrates[] = {
    /* {baudrate, input clock, prescalar, UCBRFx, UCBRSx, oversampling} */
% for (let i = 0; i < uniqueBRT.length; i++) {
%     let br = uniqueBRT[i];
    { `br.baud`, `br.freq`, `br.UCBRx`, `br.UCFx`, `br.UCSx`, `br.UCOS16` },
% }
};

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
static unsigned char uartMSP432RingBuffer`i`[`inst.ringBufferSize`];
% }

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
%     if (inst.errorCallbackFunction != '') {
extern void `inst.errorCallbackFunction`(UART_Handle, uint32_t);
%     }
% }

static const UARTMSP432_HWAttrsV1 uartMSP432HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst        = instances[i];
%     let uart        = inst.uart;
%     let solution    = uart.$solution;
%     let peripheral  = system.deviceData.peripherals[solution.peripheralName];
%     let clockSource = inst.clockSource;
%     let errorFxn    = inst.errorCallbackFunction;
%     if (errorFxn == '') {
%         errorFxn = 'NULL';
%     }
%     if (clockSource == 'Any') {
%         clockSource = UART.autoAssignClockSource(inst.baudRates);
%     }
%     let eusciName   = peripheral.name.replace("EUSCI_", "");
%     let eusciLetter = eusciName.replace(/\d/g, "");
%     //let eusciNumber = eusciName.replace(eusciLetter, "");
%     let rPinNum     = '0';
%     let tPinNum     = '0';
%     if ('rxPin' in uart) {
%         rPinNum     = uart.rxPin.$solution.devicePinName.replace(/\.GPIO.*/,"");
%         rPinNum     = rPinNum.replace(/\./,"_");
%         rPinNum     = 'UARTMSP432_'+rPinNum+'_UC'+eusciName+'RXD';
%     }
%     if ('txPin' in uart) {
%         tPinNum     = uart.txPin.$solution.devicePinName.replace(/\.GPIO.*/,"");
%         tPinNum     = tPinNum.replace(/\./,"_");
%         tPinNum     = 'UARTMSP432_'+tPinNum+'_UC'+eusciName+'TXD';
%     }
  {
    .baseAddr           = `peripheral.name`_BASE,
    .intNum             = INT_EUSCI`eusciName`,
    .intPriority        = `Common.intPriority2Hex(inst.interruptPriority)`,
    .clockSource        = EUSCI_`eusciLetter`_UART_CLOCKSOURCE_`clockSource`,
    .bitOrder           = EUSCI_`eusciLetter`_UART_`inst.bitOrder`,
    .numBaudrateEntries = sizeof(uartMSP432Baudrates) /
                          sizeof(UARTMSP432_BaudrateConfig),
    .baudrateLUT        = uartMSP432Baudrates,
    .ringBufPtr         = uartMSP432RingBuffer`i`,
    .ringBufSize        = sizeof(uartMSP432RingBuffer`i`),
    .rxPin              = `rPinNum`,
    .txPin              = `tPinNum`,
    .errorFxn           = `errorFxn`
  },
% }
};

const UART_Config UART_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
    {   /* `inst.$name` */
        .fxnTablePtr = &UARTMSP432_fxnTable,
        .object      = &uartMSP432Objects[`i`],
        .hwAttrs     = &uartMSP432HWAttrs[`i`]
    },
% }
};

const uint_least8_t UART_count = `countDef`;
