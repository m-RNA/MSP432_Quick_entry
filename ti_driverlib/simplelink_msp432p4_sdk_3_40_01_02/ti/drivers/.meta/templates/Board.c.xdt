%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== Board.c.xdt ========
 */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* localize the object names with the device ID */
    let devId = system.deviceData.deviceId;
    let part = system.deviceData.part;
    let devFamily = Common.device2DeviceFamily(devId, part);
    let boardName = Common.boardName();
%%}
/*
 *  ======== ti_drivers_config.c ========
 *  Configured TI-Drivers module definitions
 *
 *  DO NOT EDIT - This file is generated for the `boardName`
 *  by the SysConfig tool.
 */

#include <stddef.h>

#ifndef `devFamily`
#define `devFamily`
#endif

#include <ti/devices/DeviceFamily.h>

#include "ti_drivers_config.h"
% /* compute a canonical order for the used modules */
% let keys = Object.keys(system.modules).sort();
%
% /* loop over all modules in the current configuration */
% for (let i = 0; i < keys.length; i++) {
    % let mod = system.modules[keys[i]];
    % if (mod.templates && mod.templates.boardc) {
        % /* load its template and expand it with args */
        % let gen = system.getTemplate(mod.templates.boardc);

`gen(mod)`
        % }
% }

#include <ti/drivers/Board.h>

/*
 *  ======== Board_initHook ========
 *  Perform any board-specific initialization needed at startup.  This
 *  function is declared weak to allow applications to override it if needed.
 */
void __attribute__((weak)) Board_initHook(void)
{
}

/*
 *  ======== Board_init ========
 *  Perform any initialization needed before using any board APIs
 */
void Board_init(void)
{
% /* sort all modules in the current config by initPriority */
% let modules = [];
% let max = 0;
% for (let moduleName in system.modules) {
%     var mod = system.modules[moduleName];
%     if (max <= mod.initPriority) {
%         max = mod.initPriority + 1;
%     }
%     modules.push(mod);
% }
% modules.sort(function(a,b) {
%     var ap = a.initPriority == null ? max : a.initPriority;
%     var bp = b.initPriority == null ? max : b.initPriority;
%     return (ap - bp);
% });
%
% /* generate init calls in priority order */
% for (let i = 0; i < modules.length; i++) {
%     let mod = modules[i];
%     if (mod.templates && mod.templates.board_initc) {
%         /* load its template and expand it with args */
%         let genInit = system.getTemplate(mod.templates.board_initc);
    /* ==== `mod.$name` initialization ==== */
`genInit(mod)`
%     }
% }
%
    Board_initHook();
}
% /* Temporary fix for CC32XXSF LaunchPads */
% if (boardName.match(/CC32[23][05]SF_LAUNCHXL/)) {

/*
 *  ======== Board_debugHeader ========
 *  This structure prevents the CC32XXSF bootloader from overwriting the
 *  internal FLASH; this allows us to flash a program that will not be
 *  overwritten by the bootloader with the encrypted program saved in
 *  "secure/serial flash".
 *
 *  This structure must be placed at the beginning of internal FLASH (so
 *  the bootloader is able to recognize that it should not overwrite
 *  internal FLASH).
 */
#if defined (__SF_DEBUG__) || defined(__SF_NODEBUG__)
#if defined(__TI_COMPILER_VERSION__)
#pragma DATA_SECTION(Board_debugHeader, ".dbghdr")
#pragma RETAIN(Board_debugHeader)
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma location=".dbghdr"
#elif defined(__GNUC__)
__attribute__ ((section (".dbghdr")))
#endif
#if defined(__SF_DEBUG__)
const uint32_t Board_debugHeader[] = {
    0x5AA5A55A,
    0x000FF800,
    0xEFA3247D
};
#elif defined (__SF_NODEBUG__)
const uint32_t Board_debugHeader[] = {
    0xFFFFFFFF,
    0xFFFFFFFF,
    0xFFFFFFFF
};
#endif
#endif
% }
