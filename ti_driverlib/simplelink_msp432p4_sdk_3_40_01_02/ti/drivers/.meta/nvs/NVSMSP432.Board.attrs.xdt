%%{
/*
 * Copyright (c) 2018-2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== NVSMSP432.Board.attrs.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let NVS = args[0];
    let instances   = NVS.$instances;
    let generatedInstances = false;
    let name = "flashBuf";

    /* collect internal flash instances */
    let localInstances = [];
    for (let i = 0; i < instances.length; i++) {
        if (instances[i].nvsType == "Internal") {
            localInstances[localInstances.length] = instances[i];

            /* Determine if any instances generate flash buffers */
            if (instances[i].internalFlash.regionType === "Generated") {
                generatedInstances = true;
            }
        }
    }

    if (localInstances.length == 0) return;
%%}

#include <ti/drivers/nvs/NVSMSP432.h>
% if (generatedInstances == true) {

/*
 *  NVSMSP432 Internal NVS flash region definitions
 *
 * Place uninitialized char arrays at addresses
 * corresponding to the 'regionBase' addresses defined in
 * the configured NVS regions. These arrays are used as
 * place holders so that the linker will not place other
 * content there.
 *
 * For GCC targets, the 'flashBuf' arrays are each placed into
 * the shared ".nvs" section. The user must add content to
 * their GCC linker command file to place the .nvs section
 * at the lowest 'regionBase' address specified in their NVS
 * regions.
 */

#if defined(__TI_COMPILER_VERSION__)

% for (let i = 0, k = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.internalFlash.regionType !== "Generated") continue;
#pragma LOCATION(`name``k`, 0x`inst.internalFlash.regionBase.toString(16)`);
#pragma NOINIT(`name``k`);
static char `name``k++`[0x`inst.internalFlash.regionSize.toString(16)`];

% }
#elif defined(__IAR_SYSTEMS_ICC__)

% for (let i = 0, k = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.internalFlash.regionType !== "Generated") continue;
__no_init static char `name``k++`[0x`inst.internalFlash.regionSize.toString(16)`] @ 0x`inst.internalFlash.regionBase.toString(16)`;
% }

#elif defined(__GNUC__)

% for (let i = 0, k = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.internalFlash.regionType !== "Generated") continue;
__attribute__ ((section (".nvs")))
static char `name``k++`[0x`inst.internalFlash.regionSize.toString(16)`];
% }

#endif
% } /* If generatedInstances */

NVSMSP432_Object nvsMSP432Objects[`localInstances.length`];

static const NVSMSP432_HWAttrs nvsMSP432HWAttrs[`localInstances.length`] = {
% for (let i = 0, k = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
    /* `inst.$name` */
    {
%     if (inst.internalFlash.regionType === "Pointer") {
        .regionBase = (void *) 0x`inst.internalFlash.regionBase.toString(16)`,
%     }
%     else {
        .regionBase = (void *) `name``k++`,
%     }
        .regionSize = 0x`inst.internalFlash.regionSize.toString(16)`
    },
% }
};
